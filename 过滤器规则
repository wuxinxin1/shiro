shiro中过滤器的规则：

1.过滤器的类型
  a.OncePerRequestFilter,这个过滤器是用来控制过滤器执行次数的，通过设置request域，在request域中设置过滤器名称来作为标志
    这个过滤器还可以用来控制是否跳过这个控制器执行，这个过滤器有一个enabled属性，默认是true,当为false的时候，将跳过这个过滤器







2.过滤器辅助器
   a.PathMatchingFilterChainResolver,这是个路径解析器，用来匹配对应的路径的，返回匹配到的路径
   b.FilterChainManager,这个负责查找匹配到的Ant风格的路径对应到的过滤器



和过滤器相关的重要接口:
    1.FilterChainResolver:  过滤器链解析器
      接口方法：
      FilterChain getChain(ServletRequest var1, ServletResponse var2, FilterChain var3);  根据过滤器链解析器获取过滤器链(通过查看
                       FilterChainManager里面的我们配置的路径，看是否当前请求路径和 FilterChainManager里面的路径有相匹配的，找到匹配的路径)
      实现类:
      PathMatchingFilterChainResolver:根据路径匹配的过滤器链解析器
      f(属性):
      FilterChainManager:过滤器链管理器，用来保存我们自己配置的过滤器
      PatternMatcher:模式匹配器，用于匹配路径（Ant风格的）


    2.FilterChainManager:过滤器链管理器
      接口方法：
      FilterChain proxy(FilterChain var1, String var2);过滤器链代理方法，通过拿到匹配的路径，使用路径查找对应的过滤器


    3.FilterChain:过滤器链
      接口方法:
      void doFilter(ServletRequest var1, ServletResponse var2) throws IOException, ServletException;执行这个过滤器链



过滤器执行规则:

   1.通过AbstractShiroFilter的getExecutionChain获得执行链
   2.在FilterChainResolver的接口方法FilterChain getChain(ServletRequest var1, ServletResponse var2, FilterChain var3);是对getExecutionChain的细化
   ##对getChain的细化
   3.在FilterChainResolver中获取到FilterChainManager，在FilterChainManager中配置了默认的拦截器和配置了相关路径需要执行的拦截器
   4.通过FilterChainManager的hasChains方法判断我们自己有没有配置执行链
   5.将我们配置的链中路径和当前请求路径进行比对，因为我们配置的拦截器转换为了Map<String,Filter>
   6.在匹配中找到了当前路径是配置了拦截器的，那么调用FilterChainManager的FilterChain proxy(FilterChain var1, String var2);
   7.通过FilterChainManager的getChain(String chainName)方法，在Map<String,Filter>找到了过滤器
   8.创建ProxiedFilterChain类型的FilterChain实例
   9.执行ProxiedFilterChain的doFilter，开始执行过滤器链